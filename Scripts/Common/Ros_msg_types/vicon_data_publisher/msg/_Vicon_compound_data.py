# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vicon_data_publisher/Vicon_compound_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vicon_data_publisher.msg

class Vicon_compound_data(genpy.Message):
  _md5sum = "d2b39b30d3774b8b8cd046cdcfdcb70c"
  _type = "vicon_data_publisher/Vicon_compound_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """vicon_data_publisher/Force_plate_data[] force_plate_data
vicon_data_publisher/Marker_global_translation[] marker_global_translation

================================================================================
MSG: vicon_data_publisher/Force_plate_data
uint32 frameNumber
byte subsampleNumber
float64 fx_N
float64 fy_N
float64 fz_N
float64 mx_Nm
float64 my_Nm
float64 mz_Nm

================================================================================
MSG: vicon_data_publisher/Marker_global_translation
uint32 frameNumber
byte markerNumber
bool occluded
float64 x_mm
float64 y_mm
float64 z_mm
"""
  __slots__ = ['force_plate_data','marker_global_translation']
  _slot_types = ['vicon_data_publisher/Force_plate_data[]','vicon_data_publisher/Marker_global_translation[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       force_plate_data,marker_global_translation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Vicon_compound_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.force_plate_data is None:
        self.force_plate_data = []
      if self.marker_global_translation is None:
        self.marker_global_translation = []
    else:
      self.force_plate_data = []
      self.marker_global_translation = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.force_plate_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.force_plate_data:
        _x = val1
        buff.write(_get_struct_Ib6d().pack(_x.frameNumber, _x.subsampleNumber, _x.fx_N, _x.fy_N, _x.fz_N, _x.mx_Nm, _x.my_Nm, _x.mz_Nm))
      length = len(self.marker_global_translation)
      buff.write(_struct_I.pack(length))
      for val1 in self.marker_global_translation:
        _x = val1
        buff.write(_get_struct_IbB3d().pack(_x.frameNumber, _x.markerNumber, _x.occluded, _x.x_mm, _x.y_mm, _x.z_mm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.force_plate_data is None:
        self.force_plate_data = None
      if self.marker_global_translation is None:
        self.marker_global_translation = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.force_plate_data = []
      for i in range(0, length):
        val1 = vicon_data_publisher.msg.Force_plate_data()
        _x = val1
        start = end
        end += 53
        (_x.frameNumber, _x.subsampleNumber, _x.fx_N, _x.fy_N, _x.fz_N, _x.mx_Nm, _x.my_Nm, _x.mz_Nm,) = _get_struct_Ib6d().unpack(str[start:end])
        self.force_plate_data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.marker_global_translation = []
      for i in range(0, length):
        val1 = vicon_data_publisher.msg.Marker_global_translation()
        _x = val1
        start = end
        end += 30
        (_x.frameNumber, _x.markerNumber, _x.occluded, _x.x_mm, _x.y_mm, _x.z_mm,) = _get_struct_IbB3d().unpack(str[start:end])
        val1.occluded = bool(val1.occluded)
        self.marker_global_translation.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.force_plate_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.force_plate_data:
        _x = val1
        buff.write(_get_struct_Ib6d().pack(_x.frameNumber, _x.subsampleNumber, _x.fx_N, _x.fy_N, _x.fz_N, _x.mx_Nm, _x.my_Nm, _x.mz_Nm))
      length = len(self.marker_global_translation)
      buff.write(_struct_I.pack(length))
      for val1 in self.marker_global_translation:
        _x = val1
        buff.write(_get_struct_IbB3d().pack(_x.frameNumber, _x.markerNumber, _x.occluded, _x.x_mm, _x.y_mm, _x.z_mm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.force_plate_data is None:
        self.force_plate_data = None
      if self.marker_global_translation is None:
        self.marker_global_translation = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.force_plate_data = []
      for i in range(0, length):
        val1 = vicon_data_publisher.msg.Force_plate_data()
        _x = val1
        start = end
        end += 53
        (_x.frameNumber, _x.subsampleNumber, _x.fx_N, _x.fy_N, _x.fz_N, _x.mx_Nm, _x.my_Nm, _x.mz_Nm,) = _get_struct_Ib6d().unpack(str[start:end])
        self.force_plate_data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.marker_global_translation = []
      for i in range(0, length):
        val1 = vicon_data_publisher.msg.Marker_global_translation()
        _x = val1
        start = end
        end += 30
        (_x.frameNumber, _x.markerNumber, _x.occluded, _x.x_mm, _x.y_mm, _x.z_mm,) = _get_struct_IbB3d().unpack(str[start:end])
        val1.occluded = bool(val1.occluded)
        self.marker_global_translation.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Ib6d = None
def _get_struct_Ib6d():
    global _struct_Ib6d
    if _struct_Ib6d is None:
        _struct_Ib6d = struct.Struct("<Ib6d")
    return _struct_Ib6d
_struct_IbB3d = None
def _get_struct_IbB3d():
    global _struct_IbB3d
    if _struct_IbB3d is None:
        _struct_IbB3d = struct.Struct("<IbB3d")
    return _struct_IbB3d
