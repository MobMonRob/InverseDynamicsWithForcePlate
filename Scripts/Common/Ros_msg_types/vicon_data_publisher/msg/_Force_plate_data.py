# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vicon_data_publisher/Force_plate_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Force_plate_data(genpy.Message):
  _md5sum = "8d2e500f68185b9bedda8f60fa19d436"
  _type = "vicon_data_publisher/Force_plate_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 frameNumber
byte subsampleNumber
float64 fx_N
float64 fy_N
float64 fz_N
float64 mx_Nm
float64 my_Nm
float64 mz_Nm
"""
  __slots__ = ['frameNumber','subsampleNumber','fx_N','fy_N','fz_N','mx_Nm','my_Nm','mz_Nm']
  _slot_types = ['uint32','byte','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frameNumber,subsampleNumber,fx_N,fy_N,fz_N,mx_Nm,my_Nm,mz_Nm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Force_plate_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.frameNumber is None:
        self.frameNumber = 0
      if self.subsampleNumber is None:
        self.subsampleNumber = 0
      if self.fx_N is None:
        self.fx_N = 0.
      if self.fy_N is None:
        self.fy_N = 0.
      if self.fz_N is None:
        self.fz_N = 0.
      if self.mx_Nm is None:
        self.mx_Nm = 0.
      if self.my_Nm is None:
        self.my_Nm = 0.
      if self.mz_Nm is None:
        self.mz_Nm = 0.
    else:
      self.frameNumber = 0
      self.subsampleNumber = 0
      self.fx_N = 0.
      self.fy_N = 0.
      self.fz_N = 0.
      self.mx_Nm = 0.
      self.my_Nm = 0.
      self.mz_Nm = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Ib6d().pack(_x.frameNumber, _x.subsampleNumber, _x.fx_N, _x.fy_N, _x.fz_N, _x.mx_Nm, _x.my_Nm, _x.mz_Nm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.frameNumber, _x.subsampleNumber, _x.fx_N, _x.fy_N, _x.fz_N, _x.mx_Nm, _x.my_Nm, _x.mz_Nm,) = _get_struct_Ib6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Ib6d().pack(_x.frameNumber, _x.subsampleNumber, _x.fx_N, _x.fy_N, _x.fz_N, _x.mx_Nm, _x.my_Nm, _x.mz_Nm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.frameNumber, _x.subsampleNumber, _x.fx_N, _x.fy_N, _x.fz_N, _x.mx_Nm, _x.my_Nm, _x.mz_Nm,) = _get_struct_Ib6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Ib6d = None
def _get_struct_Ib6d():
    global _struct_Ib6d
    if _struct_Ib6d is None:
        _struct_Ib6d = struct.Struct("<Ib6d")
    return _struct_Ib6d
