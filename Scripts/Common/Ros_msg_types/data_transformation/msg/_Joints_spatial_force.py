# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from data_transformation/Joints_spatial_force.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import data_transformation.msg

class Joints_spatial_force(genpy.Message):
  _md5sum = "f6e09d6db6c0888889d94d191380d8dc"
  _type = "data_transformation/Joints_spatial_force"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """data_transformation/Spatial_force[6] joints_bottom_up
data_transformation/Spatial_force[6] joints_top_down

================================================================================
MSG: data_transformation/Spatial_force
float64[6] m_xyz__f_xyz
"""
  __slots__ = ['joints_bottom_up','joints_top_down']
  _slot_types = ['data_transformation/Spatial_force[6]','data_transformation/Spatial_force[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joints_bottom_up,joints_top_down

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Joints_spatial_force, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joints_bottom_up is None:
        self.joints_bottom_up = [data_transformation.msg.Spatial_force() for _ in range(6)]
      if self.joints_top_down is None:
        self.joints_top_down = [data_transformation.msg.Spatial_force() for _ in range(6)]
    else:
      self.joints_bottom_up = [data_transformation.msg.Spatial_force() for _ in range(6)]
      self.joints_top_down = [data_transformation.msg.Spatial_force() for _ in range(6)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      if len(self.joints_bottom_up) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.joints_bottom_up), 'self.joints_bottom_up')))
      for val1 in self.joints_bottom_up:
        buff.write(_get_struct_6d().pack(*val1.m_xyz__f_xyz))
      if len(self.joints_top_down) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.joints_top_down), 'self.joints_top_down')))
      for val1 in self.joints_top_down:
        buff.write(_get_struct_6d().pack(*val1.m_xyz__f_xyz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joints_bottom_up is None:
        self.joints_bottom_up = None
      if self.joints_top_down is None:
        self.joints_top_down = None
      end = 0
      self.joints_bottom_up = []
      for i in range(0, 6):
        val1 = data_transformation.msg.Spatial_force()
        start = end
        end += 48
        val1.m_xyz__f_xyz = _get_struct_6d().unpack(str[start:end])
        self.joints_bottom_up.append(val1)
      self.joints_top_down = []
      for i in range(0, 6):
        val1 = data_transformation.msg.Spatial_force()
        start = end
        end += 48
        val1.m_xyz__f_xyz = _get_struct_6d().unpack(str[start:end])
        self.joints_top_down.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      if len(self.joints_bottom_up) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.joints_bottom_up), 'self.joints_bottom_up')))
      for val1 in self.joints_bottom_up:
        buff.write(val1.m_xyz__f_xyz.tostring())
      if len(self.joints_top_down) != 6:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(self.joints_top_down), 'self.joints_top_down')))
      for val1 in self.joints_top_down:
        buff.write(val1.m_xyz__f_xyz.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joints_bottom_up is None:
        self.joints_bottom_up = None
      if self.joints_top_down is None:
        self.joints_top_down = None
      end = 0
      self.joints_bottom_up = []
      for i in range(0, 6):
        val1 = data_transformation.msg.Spatial_force()
        start = end
        end += 48
        val1.m_xyz__f_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
        self.joints_bottom_up.append(val1)
      self.joints_top_down = []
      for i in range(0, 6):
        val1 = data_transformation.msg.Spatial_force()
        start = end
        end += 48
        val1.m_xyz__f_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
        self.joints_top_down.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
